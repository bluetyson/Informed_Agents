function [meetingA, meetingB] = generate_meetings(neighbor, nNeighbor, m, t)
% Given a graph and integers m and t, return two [m t]-matrices meetingA and
% meetingB. For 1 <= i <= m and 1 <= j <= t, meetingA(i, j) and meetingB(i, j)
% represent a pair of meeting agents. This pair is generated by first choosing
% an agent A uniformly at random and afterwards choosing another agent B
% randomly from A's neighbors.
%
% INPUT
% neighbor: [m 1]: concatenated list of neighbors as returned by
%  convert_graph(A)
% nNeighbor: [n 1]: node i has neighbor(i) neighbors as returned by
%  convert_graph(A)
% m, t: [1]: dimensions of the matrices to be generated
%
% OUTPUT
% meetingA, meetingB: [m t]: matrices representing pairs of meeting agents (as
%  described above)

n = size(nNeighbor, 1);
neighborIndex = cumsum([1; nNeighbor]);
meetingA = randi(n, m, t);
meetingB = zeros(m, t);
for i = 1:t
    meetingB(:, i) = neighbor(neighborIndex(meetingA(:, i)) + ...
                     floor(rand(m, 1) .* nNeighbor(meetingA(:, i))));
end

end % generate_meetings(...)
